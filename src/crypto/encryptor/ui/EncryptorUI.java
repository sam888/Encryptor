/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto.encryptor.ui;

import crypto.encryptor.enums.CipherEngineEnum;
import crypto.encryptor.enums.HashFunctionEnum;
import crypto.encryptor.util.EncryptorUtil;
import crypto.encryptor.util.HashFunctionUtil;
import crypto.encryptor.util.StringUtils;
import java.awt.event.ItemEvent;

import javax.swing.JFrame;

// Import log4j classes.
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

/**
 * The main UI class for launching Encryptor application
 * 
 * @author Samuel Huang
 * Date: 17/April/2016
 */
public class EncryptorUI extends javax.swing.JFrame {
    
    
    private static final Logger logger = LogManager.getLogger();
    
    private final String FAILED_TO_ENCRYPT_MESSAGE = "Failed to encrypt data. See log file for details.";
    private final String FAILED_TO_DECRYPT_MESSAGE = "Failed to decrypt data. See log file for details.";
    private final String FAILED_TO_HASH = "Failed to hash data. See log file for details.";
    private final String FAILED_TO_GENERATE_SALT = "Failed to generate salt";
    
    /**
     * Creates new form EncryptorUI
     */
    public EncryptorUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        encryptDecryptButtonGroup = new javax.swing.ButtonGroup();
        symmetricKeyEncryptTabbedPane = new javax.swing.JTabbedPane();
        symmetricKeyEncryptPanel = new javax.swing.JPanel();
        algorithmPanel = new javax.swing.JPanel();
        algorithmLabel = new javax.swing.JLabel();
        algorithmComboBox = new javax.swing.JComboBox();
        saltPanel = new javax.swing.JPanel();
        saltLabel = new javax.swing.JLabel();
        saltGenerateButton = new javax.swing.JButton();
        saltTextField = new javax.swing.JTextField();
        keySizeLabel = new javax.swing.JLabel();
        saltSizeComboBox = new javax.swing.JComboBox();
        encryptDecryptPanel = new javax.swing.JPanel();
        dataLabel = new javax.swing.JLabel();
        processedDataLabel = new javax.swing.JLabel();
        dataTextField = new javax.swing.JTextField();
        encryptRadioButton = new javax.swing.JRadioButton();
        decryptRadioButton = new javax.swing.JRadioButton();
        processButton = new javax.swing.JButton();
        processedDataScrollPane = new javax.swing.JScrollPane();
        processedDataTextArea = new javax.swing.JTextArea();
        encryptDecryptDataMessageLabel = new javax.swing.JLabel();
        hashFunctionPanel = new javax.swing.JPanel();
        hashAlgorithmPanel = new javax.swing.JPanel();
        hashAlgorithmLabel = new javax.swing.JLabel();
        hashAlgorithmComboBox = new javax.swing.JComboBox();
        hashFunctionSaltPanel = new javax.swing.JPanel();
        hashSaltLabel = new javax.swing.JLabel();
        hashSaltTextField = new javax.swing.JTextField();
        hashSaltGenerateButton = new javax.swing.JButton();
        hashDataPanel = new javax.swing.JPanel();
        hashDataLabel = new javax.swing.JLabel();
        hashDataTextField = new javax.swing.JTextField();
        hashDataButton = new javax.swing.JButton();
        hashedDataLabel = new javax.swing.JLabel();
        hashedDataScrollPane = new javax.swing.JScrollPane();
        hashedDataTextArea = new javax.swing.JTextArea();
        hashDataMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encryptor V1.0");

        symmetricKeyEncryptTabbedPane.setAutoscrolls(true);
        symmetricKeyEncryptTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        symmetricKeyEncryptTabbedPane.setPreferredSize(new java.awt.Dimension(558, 530));

        symmetricKeyEncryptPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        algorithmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Algorithm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        algorithmPanel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        algorithmLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        algorithmLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        algorithmLabel.setText("Algorithm:");

        algorithmComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        algorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Twofish", "AES" }));
        algorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmComboBoxActionPerformed(evt);
            }
        });
        algorithmComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                algorithmComboBoxPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout algorithmPanelLayout = new javax.swing.GroupLayout(algorithmPanel);
        algorithmPanel.setLayout(algorithmPanelLayout);
        algorithmPanelLayout.setHorizontalGroup(
            algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(algorithmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(296, Short.MAX_VALUE))
        );
        algorithmPanelLayout.setVerticalGroup(
            algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(algorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(algorithmLabel)
                    .addComponent(algorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        algorithmComboBox.getAccessibleContext().setAccessibleDescription("");

        saltPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Key (Base64 encoded)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        saltPanel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        saltLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saltLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        saltLabel.setText("Key:");

        saltGenerateButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saltGenerateButton.setText("Generate");
        saltGenerateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saltGenerateButtonMouseClicked(evt);
            }
        });
        saltGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saltGenerateButtonActionPerformed(evt);
            }
        });

        saltTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                saltTextFieldPropertyChange(evt);
            }
        });

        keySizeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keySizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        keySizeLabel.setText("Key size in bits:");

        saltSizeComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saltSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "128", "192", "256" }));
        saltSizeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saltSizeComboBoxMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout saltPanelLayout = new javax.swing.GroupLayout(saltPanel);
        saltPanel.setLayout(saltPanelLayout);
        saltPanelLayout.setHorizontalGroup(
            saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saltPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(keySizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saltLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(saltPanelLayout.createSequentialGroup()
                        .addComponent(saltSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saltGenerateButton))
                    .addComponent(saltTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        saltPanelLayout.setVerticalGroup(
            saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saltPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keySizeLabel)
                    .addComponent(saltSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saltGenerateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saltTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saltLabel))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        encryptDecryptPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Encrypt/Decrypt Data (Base64 encoded)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        encryptDecryptPanel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        dataLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dataLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dataLabel.setText("Data:");

        processedDataLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        processedDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        processedDataLabel.setText("Processed Data:");

        dataTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dataTextFieldPropertyChange(evt);
            }
        });

        encryptDecryptButtonGroup.add(encryptRadioButton);
        encryptRadioButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        encryptRadioButton.setText("Encrypt");
        encryptRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                encryptRadioButtonItemStateChanged(evt);
            }
        });
        encryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptRadioButtonActionPerformed(evt);
            }
        });

        encryptDecryptButtonGroup.add(decryptRadioButton);
        decryptRadioButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        decryptRadioButton.setText("Decrypt");
        decryptRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                decryptRadioButtonItemStateChanged(evt);
            }
        });
        decryptRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptRadioButtonActionPerformed(evt);
            }
        });

        processButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        processButton.setText("Process");
        processButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                processButtonMouseClicked(evt);
            }
        });
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        processedDataTextArea.setEditable(false);
        processedDataTextArea.setColumns(20);
        processedDataTextArea.setRows(5);
        processedDataScrollPane.setViewportView(processedDataTextArea);

        javax.swing.GroupLayout encryptDecryptPanelLayout = new javax.swing.GroupLayout(encryptDecryptPanel);
        encryptDecryptPanel.setLayout(encryptDecryptPanelLayout);
        encryptDecryptPanelLayout.setHorizontalGroup(
            encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptDecryptPanelLayout.createSequentialGroup()
                .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(encryptDecryptPanelLayout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(encryptRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decryptRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(encryptDecryptPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dataLabel)
                            .addComponent(processedDataLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processedDataScrollPane)
                            .addGroup(encryptDecryptPanelLayout.createSequentialGroup()
                                .addComponent(dataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        encryptDecryptPanelLayout.setVerticalGroup(
            encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encryptDecryptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataLabel)
                    .addComponent(dataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptRadioButton)
                    .addComponent(encryptRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(encryptDecryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processedDataLabel)
                    .addComponent(processedDataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        encryptDecryptDataMessageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        encryptDecryptDataMessageLabel.setForeground(new java.awt.Color(255, 0, 0));
        encryptDecryptDataMessageLabel.setToolTipText("");

        javax.swing.GroupLayout symmetricKeyEncryptPanelLayout = new javax.swing.GroupLayout(symmetricKeyEncryptPanel);
        symmetricKeyEncryptPanel.setLayout(symmetricKeyEncryptPanelLayout);
        symmetricKeyEncryptPanelLayout.setHorizontalGroup(
            symmetricKeyEncryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symmetricKeyEncryptPanelLayout.createSequentialGroup()
                .addGroup(symmetricKeyEncryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(symmetricKeyEncryptPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(symmetricKeyEncryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(algorithmPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saltPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(symmetricKeyEncryptPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(symmetricKeyEncryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encryptDecryptDataMessageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encryptDecryptPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        symmetricKeyEncryptPanelLayout.setVerticalGroup(
            symmetricKeyEncryptPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symmetricKeyEncryptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(algorithmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(saltPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(encryptDecryptPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(encryptDecryptDataMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
        );

        symmetricKeyEncryptTabbedPane.addTab("Symmetric-key Encryption", symmetricKeyEncryptPanel);

        hashFunctionPanel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        hashAlgorithmPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Algorithm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        hashAlgorithmPanel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        hashAlgorithmLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashAlgorithmLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hashAlgorithmLabel.setText("Algorithm:");

        hashAlgorithmComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashAlgorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MD5", "SHA-1", "SHA-256", "Bcrypt" }));
        hashAlgorithmComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashAlgorithmComboBoxActionPerformed(evt);
            }
        });
        hashAlgorithmComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                hashAlgorithmComboBoxPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout hashAlgorithmPanelLayout = new javax.swing.GroupLayout(hashAlgorithmPanel);
        hashAlgorithmPanel.setLayout(hashAlgorithmPanelLayout);
        hashAlgorithmPanelLayout.setHorizontalGroup(
            hashAlgorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashAlgorithmPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(hashAlgorithmLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashAlgorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hashAlgorithmPanelLayout.setVerticalGroup(
            hashAlgorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashAlgorithmPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashAlgorithmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashAlgorithmLabel)
                    .addComponent(hashAlgorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hashFunctionSaltPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salt (Base64 encoded)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        hashFunctionSaltPanel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        hashSaltLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashSaltLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hashSaltLabel.setText("Salt:");

        hashSaltGenerateButton.setText("Generate");
        hashSaltGenerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashSaltGenerateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hashFunctionSaltPanelLayout = new javax.swing.GroupLayout(hashFunctionSaltPanel);
        hashFunctionSaltPanel.setLayout(hashFunctionSaltPanelLayout);
        hashFunctionSaltPanelLayout.setHorizontalGroup(
            hashFunctionSaltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashFunctionSaltPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(hashSaltLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashSaltTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashSaltGenerateButton)
                .addContainerGap())
        );
        hashFunctionSaltPanelLayout.setVerticalGroup(
            hashFunctionSaltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashFunctionSaltPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashFunctionSaltPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashSaltLabel)
                    .addComponent(hashSaltTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hashSaltGenerateButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hashDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hash Data (Base64 encoded) = hashFunction( Salt + Data ) ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Aharoni", 1, 14))); // NOI18N
        hashDataPanel.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        hashDataLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        hashDataLabel.setText("Data:");

        hashDataButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashDataButton.setText("Hash Data");
        hashDataButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                hashDataButtonMouseDragged(evt);
            }
        });
        hashDataButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hashDataButtonMouseClicked(evt);
            }
        });
        hashDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashDataButtonActionPerformed(evt);
            }
        });
        hashDataButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hashDataButtonKeyPressed(evt);
            }
        });

        hashedDataLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashedDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hashedDataLabel.setText("Hashed Data:");

        hashedDataTextArea.setEditable(false);
        hashedDataTextArea.setColumns(20);
        hashedDataTextArea.setRows(5);
        hashedDataScrollPane.setViewportView(hashedDataTextArea);

        javax.swing.GroupLayout hashDataPanelLayout = new javax.swing.GroupLayout(hashDataPanel);
        hashDataPanel.setLayout(hashDataPanelLayout);
        hashDataPanelLayout.setHorizontalGroup(
            hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hashDataLabel)
                    .addComponent(hashedDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashedDataScrollPane)
                    .addGroup(hashDataPanelLayout.createSequentialGroup()
                        .addComponent(hashDataButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(hashDataTextField))
                .addContainerGap())
        );
        hashDataPanelLayout.setVerticalGroup(
            hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashDataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hashDataLabel)
                    .addComponent(hashDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hashDataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashedDataLabel)
                    .addComponent(hashedDataScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        hashDataMessageLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        hashDataMessageLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout hashFunctionPanelLayout = new javax.swing.GroupLayout(hashFunctionPanel);
        hashFunctionPanel.setLayout(hashFunctionPanelLayout);
        hashFunctionPanelLayout.setHorizontalGroup(
            hashFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashFunctionPanelLayout.createSequentialGroup()
                .addGroup(hashFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hashFunctionPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(hashFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashAlgorithmPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hashFunctionSaltPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(hashFunctionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(hashFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashDataMessageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hashDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        hashFunctionPanelLayout.setVerticalGroup(
            hashFunctionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashFunctionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hashAlgorithmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(hashFunctionSaltPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(hashDataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashDataMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        hashDataPanel.getAccessibleContext().setAccessibleName("Hashed Data");

        symmetricKeyEncryptTabbedPane.addTab("Hash Function", hashFunctionPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(symmetricKeyEncryptTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(symmetricKeyEncryptTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
        );

        symmetricKeyEncryptTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed

        String algorithm = (String)algorithmComboBox.getSelectedItem();
        CipherEngineEnum cipherEngineEnum = CipherEngineEnum.get( algorithm );

        String salt = saltTextField.getText();
        String data = dataTextField.getText();

        if ( StringUtils.isBlank( salt ) || StringUtils.isBlank( data ) ) {
            encryptDecryptDataMessageLabel.setText( "Key and data can't be empty." );
            return;
        }
        
        if ( encryptRadioButton.isSelected() ) {

            try {
                // Encrypt data
                processedDataTextArea.setText( EncryptorUtil.encrypt( salt, data, cipherEngineEnum ) );
            } catch (Exception ex) {
                encryptDecryptDataMessageLabel.setText( FAILED_TO_ENCRYPT_MESSAGE );
                
                String saltSizeInBits = saltSizeComboBox.getSelectedItem().toString();
                logger.error( "Failed in encrypt data with salt=" + salt + " of size " + 
                    saltSizeInBits + " bits, data=" + data + ", algorithm=" + cipherEngineEnum, ex);
                
                ex.printStackTrace();
                return;
            }
            
        } else if ( decryptRadioButton.isSelected() ) {
            
            try {
                // Decrypt data
                processedDataTextArea.setText( EncryptorUtil.decrypt( salt, data, cipherEngineEnum ) );
            } catch (Exception ex) {
                encryptDecryptDataMessageLabel.setText( FAILED_TO_DECRYPT_MESSAGE );
                
                String saltSizeInBits = saltSizeComboBox.getSelectedItem().toString();
                logger.error( "Failed in decrypt data with salt=" + salt + " of size " + 
                    saltSizeInBits + " bits, data=" + data + ", algorithm=" + cipherEngineEnum, ex);
                
                ex.printStackTrace();
                return;
            }
        }
        encryptDecryptDataMessageLabel.setText("");
    }//GEN-LAST:event_processButtonActionPerformed

    private void processButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_processButtonMouseClicked

    private void decryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptRadioButtonActionPerformed
        // TODO add your handling code here:
        processedDataLabel.setText( "Decrypted Data:");
    }//GEN-LAST:event_decryptRadioButtonActionPerformed

    private void saltSizeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saltSizeComboBoxMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_saltSizeComboBoxMouseClicked

    private void saltGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saltGenerateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saltGenerateButtonActionPerformed

    private void saltGenerateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saltGenerateButtonMouseClicked
        String saltSizeStr = (String)saltSizeComboBox.getSelectedItem();
        int saltSize = new Integer( saltSizeStr );
        String salt = null;
        try {
            salt = EncryptorUtil.generateBase64EncodedKey( saltSize );
        } catch (Exception ex) {
            logger.error( "Error generating key/salt of size " + saltSize + " bits", ex );
            encryptDecryptDataMessageLabel.setText( "Failed to generate key of size " + saltSize + " bits. See log file for details" );
        }
        saltTextField.setText( salt );
        encryptDecryptDataMessageLabel.setText("");
    }//GEN-LAST:event_saltGenerateButtonMouseClicked

    private void algorithmComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_algorithmComboBoxPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmComboBoxPropertyChange

    private void algorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmComboBoxActionPerformed

    }//GEN-LAST:event_algorithmComboBoxActionPerformed

    private void hashAlgorithmComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashAlgorithmComboBoxActionPerformed
        // TODO add your handling code here:
        
        String hashFunction = (String)hashAlgorithmComboBox.getSelectedItem();
        HashFunctionEnum hashFunctionEnum = HashFunctionEnum.get( hashFunction );
        
        if ( hashFunctionEnum == HashFunctionEnum.BCRYPT ) {
            // BCrypt is generating its own salt so hide salt panel
            hashFunctionSaltPanel.setVisible( false );
        } else {
            hashFunctionSaltPanel.setVisible( true );
        }
    }//GEN-LAST:event_hashAlgorithmComboBoxActionPerformed

    private void hashAlgorithmComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_hashAlgorithmComboBoxPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_hashAlgorithmComboBoxPropertyChange

    private void hashDataButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hashDataButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_hashDataButtonMouseClicked

    private void hashDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashDataButtonActionPerformed
        // TODO add your handling code here:
        
        String hashFunction = (String)hashAlgorithmComboBox.getSelectedItem();        
        HashFunctionEnum hashFunctionEnum = HashFunctionEnum.get( hashFunction );

        if ( !HashFunctionUtil.isHashFunctionSupported( hashFunctionEnum ) ) {
            hashDataMessageLabel.setText("Unsupported hash function " + hashFunction);
            return;
        }
        
        String data = hashDataTextField.getText();
        String hashedData = null;
        
        if ( hashFunctionEnum == HashFunctionEnum.BCRYPT ) {
            hashedData = HashFunctionUtil.bCryptHashPassword( data );   
        } else {
            
            String salt = hashSaltTextField.getText();
            try {
                hashedData = HashFunctionUtil.hash(salt, data, hashFunctionEnum);
            }
            catch (Exception ex) {
                logger.error( "Error hashing data using algorithm '" + hashFunction + "'.", ex );
                hashDataMessageLabel.setText( FAILED_TO_HASH );
                ex.printStackTrace();
                return;
            }
        }
        
        hashedDataTextArea.setText( hashedData );
        hashDataMessageLabel.setText("");
    }//GEN-LAST:event_hashDataButtonActionPerformed

    private void hashDataButtonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hashDataButtonMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_hashDataButtonMouseDragged

    private void hashDataButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hashDataButtonKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_hashDataButtonKeyPressed

    private void saltTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_saltTextFieldPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_saltTextFieldPropertyChange

    private void dataTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dataTextFieldPropertyChange
        // TODO add your handling code here:        
    }//GEN-LAST:event_dataTextFieldPropertyChange

    private void hashSaltGenerateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashSaltGenerateButtonActionPerformed
        // TODO add your handling code here:
        String salt = null;
        try {
            salt = HashFunctionUtil.getSalt();
            
        } catch (Exception ex) {
            logger.error( FAILED_TO_GENERATE_SALT, ex );
            hashDataMessageLabel.setText( FAILED_TO_GENERATE_SALT  + ". See log file for details.");
            return;
        }
        hashDataMessageLabel.setText( "" );
        hashSaltTextField.setText( salt );
    }//GEN-LAST:event_hashSaltGenerateButtonActionPerformed

    private void encryptRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptRadioButtonActionPerformed
        // TODO add your handling code here:  
    }//GEN-LAST:event_encryptRadioButtonActionPerformed

    private void encryptRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_encryptRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            processedDataLabel.setText( "Encrypted Data:");
        }
    }//GEN-LAST:event_encryptRadioButtonItemStateChanged

    private void decryptRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_decryptRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            processedDataLabel.setText( "Decrypted Data:");
        }
    }//GEN-LAST:event_decryptRadioButtonItemStateChanged

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JFrame encryptorFrame = new EncryptorUI();
                encryptorFrame.setLocationRelativeTo( null ); // center the frame to middle of screen
                encryptorFrame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmComboBox;
    private javax.swing.JLabel algorithmLabel;
    private javax.swing.JPanel algorithmPanel;
    private javax.swing.JLabel dataLabel;
    private javax.swing.JTextField dataTextField;
    private javax.swing.JRadioButton decryptRadioButton;
    private javax.swing.ButtonGroup encryptDecryptButtonGroup;
    private javax.swing.JLabel encryptDecryptDataMessageLabel;
    private javax.swing.JPanel encryptDecryptPanel;
    private javax.swing.JRadioButton encryptRadioButton;
    private javax.swing.JComboBox hashAlgorithmComboBox;
    private javax.swing.JLabel hashAlgorithmLabel;
    private javax.swing.JPanel hashAlgorithmPanel;
    private javax.swing.JButton hashDataButton;
    private javax.swing.JLabel hashDataLabel;
    private javax.swing.JLabel hashDataMessageLabel;
    private javax.swing.JPanel hashDataPanel;
    private javax.swing.JTextField hashDataTextField;
    private javax.swing.JPanel hashFunctionPanel;
    private javax.swing.JPanel hashFunctionSaltPanel;
    private javax.swing.JButton hashSaltGenerateButton;
    private javax.swing.JLabel hashSaltLabel;
    private javax.swing.JTextField hashSaltTextField;
    private javax.swing.JLabel hashedDataLabel;
    private javax.swing.JScrollPane hashedDataScrollPane;
    private javax.swing.JTextArea hashedDataTextArea;
    private javax.swing.JLabel keySizeLabel;
    private javax.swing.JButton processButton;
    private javax.swing.JLabel processedDataLabel;
    private javax.swing.JScrollPane processedDataScrollPane;
    private javax.swing.JTextArea processedDataTextArea;
    private javax.swing.JButton saltGenerateButton;
    private javax.swing.JLabel saltLabel;
    private javax.swing.JPanel saltPanel;
    private javax.swing.JComboBox saltSizeComboBox;
    private javax.swing.JTextField saltTextField;
    private javax.swing.JPanel symmetricKeyEncryptPanel;
    private javax.swing.JTabbedPane symmetricKeyEncryptTabbedPane;
    // End of variables declaration//GEN-END:variables
}
