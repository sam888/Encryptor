

    Encryptor 1.0

Author: Samuel Huang
Date:   24/04/2016

* How to run:

    1. Install JDK 7.x or 8.x first. JDK 6 most likely won't work as encryptor uses Log4j 2.5 API
       and Log4j 2 website states

            Log4j 2.4 and greater requires Java 7, versions 2.0-alpha1 to 2.3 required Java 6

    2. In Windows OS, after unzipping the zip file, open the Encryptor_x.0 folder then double click 
       encryptor.bat 

* See 'encryptor walkthrough.docx' if interested to enhance, maintain or know how it's implemented.

   
    ============================================================
	
* Encryptor is a simple desktop application implemented in Java Swing to: 
 
1. Encrypt/decryptor data using either AES/Twofish algorithm in the 'Symmetric-key Encryption' tab.

   Both AES & Twofish algorithms are used widely in the real world and considered secure.
   
   Both the 'Key' and 'Data' text fields need to be populated before encryption can happen.
      
   The encrypted data could also be decrypted using the key in the 'Key' text field. 
   
   The encryption key can be randomly generated by clicking the 'Generate' button. 
   
   The generated key in 'Key' text field will be Base64 encoded string from the generated binary data.
    
   The encryption key can be generated in 3 different sizes, 128, 192 and 256 bits by using the 'Key size' 
   drop down list.
   
   The longer the key length, the stronger the strength of encryption will be in theory so always use the 
   longest key size. Performance hit will be negligible.
      
2. Hash data in the 'Hash Function' tab. The available hash functions to choose from are MD5, SHA-1, SHA-256 and 
   BCrypt. See https://en.wikipedia.org/wiki/Cryptographic_hash_function for more details of hash functions.
      
   A hash function is basically a one-way hash of input data such that once hashed, the data is practically 
   impossible to revert back to its original input. 
   
   The most common application of hash function is to generate hashed string of passwords for storing in database.
   
   Do not use MD5 to hash data for new project, period. It's considered insecure and has been shown to be cracked 
   REPEATEDLY.
   
   Many legacy applications are stuck with MD5 hashed passwords stored in database. That should be the only reason 
   for using MD5 in production. See https://www.raymond.cc/blog/ask-raymond-how-to-decrypt-md5-hashed-strings/ to 
   see how secure it is.
       

  
	 
	 